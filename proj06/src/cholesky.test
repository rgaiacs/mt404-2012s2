Test chol_status is not possible beacuse "Python I/O will not catch I/O from
Fortran" (see http://osdir.com/ml/python.scientific.user/2003-10/msg00034.html)

Test show_chol is not possible beacuse "Python I/O will not catch I/O from
Fortran" (see http://osdir.com/ml/python.scientific.user/2003-10/msg00034.html)

Test chol

    >>> A = numpy.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]])
    >>> A = square_matrix.transpose_smatrix(A, 3)
    >>> A
    array([[ 1.,  0.,  0.],
           [ 0.,  1.,  0.],
           [ 0.,  0.,  1.]])
    >>> A = numpy.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
    >>> A = square_matrix.transpose_smatrix(A, 3)
    >>> A
    array([[ 1.,  4.,  7.],
           [ 2.,  5.,  8.],
           [ 3.,  6.,  9.]])

Test is_symmetric

    >>> A = numpy.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]])
    >>> square_matrix.is_symmetric(A, 3)
    1
    >>> A = numpy.array([[1, 2, 3], [2, 4, 5], [3, 5, 6]])
    >>> square_matrix.is_symmetric(A, 3)
    1
    >>> A = numpy.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
    >>> square_matrix.is_symmetric(A, 3)
    0

Test rand_tl

    >>> A = numpy.array([[0, 0, 0], [0, 0, 0], [0, 0, 0]])
    >>> A = square_matrix.rand_tl(A, 3)
    >>> [A[0, 1], A[0, 2], A[1, 2]]
    [0.0, 0.0, 0.0]

Test sum_identity

    >>> A = numpy.array([[0, 0, 0], [0, 0, 0], [0, 0, 0]])
    >>> square_matrix.sum_identity(A, 3)
    array([[ 1.,  0.,  0.],
           [ 0.,  1.,  0.],
           [ 0.,  0.,  1.]])
    >>> A = numpy.array([[1, 0, 0], [0, 2, 0], [0, 0, 3]])
    >>> square_matrix.sum_identity(A, 3)
    array([[ 2.,  0.,  0.],
           [ 0.,  3.,  0.],
           [ 0.,  0.,  4.]])
    >>> A = numpy.array([[0, 2, 3], [4, 0, 5], [6, 7, 0]])
    >>> square_matrix.sum_identity(A, 3)
    array([[ 1.,  2.,  3.],
           [ 4.,  1.,  5.],
           [ 6.,  7.,  1.]])

Test mtv

    >>> A = numpy.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]])
    >>> x = numpy.array([1, 1, 1])
    >>> square_matrix.mtv(A, x, 3)
    array([ 1.,  1.,  1.])
    >>> x = numpy.array([1, 2, 3])
    >>> square_matrix.mtv(A, x, 3)
    array([ 1.,  2.,  3.])
    >>> A = numpy.array([[1, 1, 1], [1, 1, 1], [1, 1, 1]])
    >>> x = numpy.array([1, 1, 1])
    >>> square_matrix.mtv(A, x, 3)
    array([ 3.,  3.,  3.])
    >>> A = numpy.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
    >>> x = numpy.array([1, 1, 1])
    >>> square_matrix.mtv(A, x, 3)
    array([  6.,  15.,  24.])

Test mt2

    >>> G = numpy.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]])
    >>> square_matrix.mt2(G, 3)
    array([[ 1.,  0.,  0.],
           [ 0.,  1.,  0.],
           [ 0.,  0.,  1.]])
    >>> G = numpy.array([[1, 1, 1], [1, 1, 1], [1, 1, 1]])
    >>> square_matrix.mt2(G, 3)
    array([[ 3.,  3.,  3.],
           [ 3.,  3.,  3.],
           [ 3.,  3.,  3.]])
    >>> G = numpy.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
    >>> square_matrix.mt2(G, 3)
    array([[  14.,   32.,   50.],
           [  32.,   77.,  122.],
           [  50.,  122.,  194.]])

Test solve_tl

    >>> A = numpy.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]])
    >>> b = numpy.array([1, 1, 1])
    >>> square_matrix.solve_tl(A, b, 3)
    array([ 1.,  1.,  1.])
    >>> b = numpy.array([2, 2, 2])
    >>> square_matrix.solve_tl(A, b, 3)
    array([ 2.,  2.,  2.])
    >>> A = numpy.array([[1, 0, 0], [1, 1, 0], [1, 1, 1]])
    >>> b = numpy.array([1, 2, 3])
    >>> square_matrix.solve_tl(A, b, 3)
    array([ 1.,  1.,  1.])
    >>> b = numpy.array([1, 3, 6])
    >>> square_matrix.solve_tl(A, b, 3)
    array([ 1.,  2.,  3.])

Test solve_tu

    >>> A = numpy.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]])
    >>> b = numpy.array([1, 1, 1])
    >>> square_matrix.solve_tu(A, b, 3)
    array([ 1.,  1.,  1.])
    >>> b = numpy.array([2, 2, 2])
    >>> square_matrix.solve_tu(A, b, 3)
    array([ 2.,  2.,  2.])
    >>> A = numpy.array([[1, 1, 1], [0, 1, 1], [0, 0, 1]])
    >>> b = numpy.array([3, 2, 1])
    >>> square_matrix.solve_tu(A, b, 3)
    array([ 1.,  1.,  1.])
    >>> b = numpy.array([6, 3, 1])
    >>> square_matrix.solve_tu(A, b, 3)
    array([ 3.,  2.,  1.])
